/* Automatically generated nanopb header */
/* Generated by nanopb-0.2.8 at Tue Mar 17 11:31:30 2015. */

#ifndef _PB_FRIMESSAGES_PB_H_
#define _PB_FRIMESSAGES_PB_H_
#include <pb.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _FRISessionState {
    FRISessionState_IDLE = 0,
    FRISessionState_MONITORING_WAIT = 1,
    FRISessionState_MONITORING_READY = 2,
    FRISessionState_COMMANDING_WAIT = 3,
    FRISessionState_COMMANDING_ACTIVE = 4
} FRISessionState;

typedef enum _FRIConnectionQuality {
    FRIConnectionQuality_POOR = 0,
    FRIConnectionQuality_FAIR = 1,
    FRIConnectionQuality_GOOD = 2,
    FRIConnectionQuality_EXCELLENT = 3
} FRIConnectionQuality;

typedef enum _SafetyState {
    SafetyState_NORMAL_OPERATION = 0,
    SafetyState_SAFETY_STOP_LEVEL_0 = 1,
    SafetyState_SAFETY_STOP_LEVEL_1 = 2,
    SafetyState_SAFETY_STOP_LEVEL_2 = 3
} SafetyState;

typedef enum _OperationMode {
    OperationMode_TEST_MODE_1 = 0,
    OperationMode_TEST_MODE_2 = 1,
    OperationMode_AUTOMATIC_MODE = 2
} OperationMode;

typedef enum _DriveState {
    DriveState_OFF = 0,
    DriveState_TRANSITIONING = 1,
    DriveState_ACTIVE = 2
} DriveState;

typedef enum _ControlMode {
    ControlMode_POSITION_CONTROLMODE = 0,
    ControlMode_CARTESIAN_IMPEDANCE_CONTROLMODE = 1,
    ControlMode_JOINT_IMPEDANCE_CONTROLMODE = 2,
    ControlMode_NO_CONTROLMODE = 3
} ControlMode;

typedef enum _ClientCommandMode {
    ClientCommandMode_NO_COMMAND_MODE = 0,
    ClientCommandMode_POSITION = 1,
    ClientCommandMode_WRENCH = 2,
    ClientCommandMode_TORQUE = 3
} ClientCommandMode;

typedef enum _OverlayType {
    OverlayType_NO_OVERLAY = 0,
    OverlayType_JOINT = 1,
    OverlayType_CARTESIAN = 2
} OverlayType;

/* Struct definitions */
typedef struct _CartesianVector {
    size_t element_count;
    double element[6];
} CartesianVector;

typedef struct _Checksum {
    bool has_crc32;
    int32_t crc32;
} Checksum;

typedef struct _ConnectionInfo {
    FRISessionState sessionState;
    FRIConnectionQuality quality;
    bool has_sendPeriod;
    uint32_t sendPeriod;
    bool has_receiveMultiplier;
    uint32_t receiveMultiplier;
} ConnectionInfo;

typedef struct _JointValues {
    pb_callback_t value;
} JointValues;

typedef struct _MessageHeader {
    uint32_t messageIdentifier;
    uint32_t sequenceCounter;
    uint32_t reflectedSequenceCounter;
} MessageHeader;

typedef struct _RobotInfo {
    bool has_numberOfJoints;
    int32_t numberOfJoints;
    bool has_safetyState;
    SafetyState safetyState;
    pb_callback_t driveState;
    bool has_operationMode;
    OperationMode operationMode;
    bool has_controlMode;
    ControlMode controlMode;
} RobotInfo;

typedef struct _TimeStamp {
    uint32_t sec;
    uint32_t nanosec;
} TimeStamp;

typedef struct _MessageCommandData {
    bool has_jointPosition;
    JointValues jointPosition;
    bool has_cartesianWrenchFeedForward;
    CartesianVector cartesianWrenchFeedForward;
    bool has_jointTorque;
    JointValues jointTorque;
} MessageCommandData;

typedef struct _MessageEndOf {
    bool has_messageLength;
    int32_t messageLength;
    bool has_messageChecksum;
    Checksum messageChecksum;
} MessageEndOf;

typedef struct _MessageIpoData {
    bool has_jointPosition;
    JointValues jointPosition;
    bool has_clientCommandMode;
    ClientCommandMode clientCommandMode;
    bool has_overlayType;
    OverlayType overlayType;
    bool has_trackingPerformance;
    double trackingPerformance;
} MessageIpoData;

typedef struct _MessageMonitorData {
    bool has_measuredJointPosition;
    JointValues measuredJointPosition;
    bool has_measuredTorque;
    JointValues measuredTorque;
    bool has_commandedJointPosition;
    JointValues commandedJointPosition;
    bool has_commandedTorque;
    JointValues commandedTorque;
    bool has_externalTorque;
    JointValues externalTorque;
    bool has_externalForce;
    CartesianVector externalForce;
    bool has_timestamp;
    TimeStamp timestamp;
} MessageMonitorData;

typedef struct _FRICommandMessage {
    MessageHeader header;
    bool has_commandData;
    MessageCommandData commandData;
    bool has_endOfMessageData;
    MessageEndOf endOfMessageData;
} FRICommandMessage;

typedef struct _FRIMonitoringMessage {
    MessageHeader header;
    bool has_robotInfo;
    RobotInfo robotInfo;
    bool has_monitorData;
    MessageMonitorData monitorData;
    bool has_connectionInfo;
    ConnectionInfo connectionInfo;
    bool has_ipoData;
    MessageIpoData ipoData;
    bool has_endOfMessageData;
    MessageEndOf endOfMessageData;
} FRIMonitoringMessage;

/* Default values for struct fields */

/* Field tags (for use in manual encoding/decoding) */
#define CartesianVector_element_tag              1
#define Checksum_crc32_tag                       1
#define ConnectionInfo_sessionState_tag          1
#define ConnectionInfo_quality_tag               2
#define ConnectionInfo_sendPeriod_tag            3
#define ConnectionInfo_receiveMultiplier_tag     4
#define JointValues_value_tag                    1
#define MessageHeader_messageIdentifier_tag      1
#define MessageHeader_sequenceCounter_tag        2
#define MessageHeader_reflectedSequenceCounter_tag 3
#define RobotInfo_numberOfJoints_tag             1
#define RobotInfo_safetyState_tag                2
#define RobotInfo_driveState_tag                 5
#define RobotInfo_operationMode_tag              6
#define RobotInfo_controlMode_tag                7
#define TimeStamp_sec_tag                        1
#define TimeStamp_nanosec_tag                    2
#define MessageCommandData_jointPosition_tag     1
#define MessageCommandData_cartesianWrenchFeedForward_tag 2
#define MessageCommandData_jointTorque_tag       3
#define MessageEndOf_messageLength_tag           1
#define MessageEndOf_messageChecksum_tag         2
#define MessageIpoData_jointPosition_tag         1
#define MessageIpoData_clientCommandMode_tag     10
#define MessageIpoData_overlayType_tag           11
#define MessageIpoData_trackingPerformance_tag   12
#define MessageMonitorData_measuredJointPosition_tag 1
#define MessageMonitorData_measuredTorque_tag    2
#define MessageMonitorData_commandedJointPosition_tag 3
#define MessageMonitorData_commandedTorque_tag   4
#define MessageMonitorData_externalTorque_tag    5
#define MessageMonitorData_externalForce_tag     6
#define MessageMonitorData_timestamp_tag         15
#define FRICommandMessage_header_tag             1
#define FRICommandMessage_commandData_tag        2
#define FRICommandMessage_endOfMessageData_tag   15
#define FRIMonitoringMessage_header_tag          1
#define FRIMonitoringMessage_connectionInfo_tag  4
#define FRIMonitoringMessage_robotInfo_tag       2
#define FRIMonitoringMessage_monitorData_tag     3
#define FRIMonitoringMessage_ipoData_tag         5
#define FRIMonitoringMessage_endOfMessageData_tag 15

/* Struct field encoding specification for nanopb */
extern const pb_field_t JointValues_fields[2];
extern const pb_field_t TimeStamp_fields[3];
extern const pb_field_t CartesianVector_fields[2];
extern const pb_field_t Checksum_fields[2];
extern const pb_field_t MessageHeader_fields[4];
extern const pb_field_t ConnectionInfo_fields[5];
extern const pb_field_t RobotInfo_fields[6];
extern const pb_field_t MessageMonitorData_fields[8];
extern const pb_field_t MessageIpoData_fields[5];
extern const pb_field_t MessageCommandData_fields[4];
extern const pb_field_t MessageEndOf_fields[3];
extern const pb_field_t FRIMonitoringMessage_fields[7];
extern const pb_field_t FRICommandMessage_fields[4];

/* Maximum encoded size of messages (where known) */
#define TimeStamp_size                           12
#define CartesianVector_size                     54
#define Checksum_size                            11
#define MessageHeader_size                       18
#define ConnectionInfo_size                      24
#define MessageEndOf_size                        24

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
